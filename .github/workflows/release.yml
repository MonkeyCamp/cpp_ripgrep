name: Release

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release

jobs:
  # Build and package for multiple platforms
  build-and-package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux-x64, windows-x64, windows-x86]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libpcre2-dev libre2-dev pkg-config
        sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 wine64 wine32
    
    - name: Build Linux x64
      if: matrix.platform == 'linux-x64'
      run: |
        mkdir build-linux
        cd build-linux
        cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        make -j$(nproc)
        strip cpp_ripgrep
    
    - name: Build Windows x64
      if: matrix.platform == 'windows-x64'
      run: |
        mkdir build-windows64
        cd build-windows64
        cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/windows-toolchain.cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        make -j$(nproc)
    
    - name: Build Windows x86
      if: matrix.platform == 'windows-x86'
      run: |
        mkdir build-windows32
        cd build-windows32
        cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/windows32-toolchain.cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        make -j$(nproc)
    
    - name: Test Linux build
      if: matrix.platform == 'linux-x64'
      run: |
        cd build-linux
        echo "hello world" > test.txt
        ./cpp_ripgrep "hello" test.txt
    
    - name: Test Windows builds
      if: matrix.platform == 'windows-x64' || matrix.platform == 'windows-x86'
      run: |
        if [ "${{ matrix.platform }}" == "windows-x64" ]; then
          cd build-windows64
          wine ./cpp_ripgrep.exe --version
        else
          cd build-windows32
          wine ./cpp_ripgrep.exe --version
        fi
    
    - name: Create package
      run: |
        if [ "${{ matrix.platform }}" == "linux-x64" ]; then
          cd build-linux
          tar -czf cpp_ripgrep-${{ matrix.platform }}.tar.gz cpp_ripgrep
          echo "ASSET_PATH=build-linux/cpp_ripgrep-${{ matrix.platform }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=cpp_ripgrep-${{ matrix.platform }}.tar.gz" >> $GITHUB_ENV
        elif [ "${{ matrix.platform }}" == "windows-x64" ]; then
          cd build-windows64
          zip cpp_ripgrep-${{ matrix.platform }}.zip cpp_ripgrep.exe
          echo "ASSET_PATH=build-windows64/cpp_ripgrep-${{ matrix.platform }}.zip" >> $GITHUB_ENV
          echo "ASSET_NAME=cpp_ripgrep-${{ matrix.platform }}.zip" >> $GITHUB_ENV
        else
          cd build-windows32
          zip cpp_ripgrep-${{ matrix.platform }}.zip cpp_ripgrep.exe
          echo "ASSET_PATH=build-windows32/cpp_ripgrep-${{ matrix.platform }}.zip" >> $GITHUB_ENV
          echo "ASSET_NAME=cpp_ripgrep-${{ matrix.platform }}.zip" >> $GITHUB_ENV
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.platform }}
        path: ${{ env.ASSET_PATH }}

  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: build-and-package
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## cpp_ripgrep ${{ github.ref_name }}
          
          A high-performance grep-like tool written in C++ with similar performance characteristics to ripgrep.
          
          ### Downloads
          
          - **Linux x64**: `cpp_ripgrep-linux-x64.tar.gz`
          - **Windows x64**: `cpp_ripgrep-windows-x64.zip`
          - **Windows x86**: `cpp_ripgrep-windows-x86.zip`
          
          ### Features
          
          - Fast pattern matching with PCRE2 or RE2
          - Multi-threaded file processing
          - Memory-mapped I/O for efficiency
          - Unicode support
          - Cross-platform compatibility
          
          ### Installation
          
          **Linux:**
          ```bash
          tar -xzf cpp_ripgrep-linux-x64.tar.gz
          sudo mv cpp_ripgrep /usr/local/bin/
          ```
          
          **Windows:**
          Extract the zip file and run `cpp_ripgrep.exe` from the command line.
    
    - name: Upload Linux x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/linux-x64/cpp_ripgrep-linux-x64.tar.gz
        asset_name: cpp_ripgrep-linux-x64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Windows x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/windows-x64/cpp_ripgrep-windows-x64.zip
        asset_name: cpp_ripgrep-windows-x64.zip
        asset_content_type: application/zip
    
    - name: Upload Windows x86
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/windows-x86/cpp_ripgrep-windows-x86.zip
        asset_name: cpp_ripgrep-windows-x86.zip
        asset_content_type: application/zip 