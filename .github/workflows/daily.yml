name: Daily Build

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  BUILD_TYPE: Release

jobs:
  # Comprehensive Linux build with multiple compilers
  linux-comprehensive:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc-11, clang-14]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libpcre2-dev libre2-dev pkg-config
        sudo apt-get install -y ${{ matrix.compiler }}
    
    - name: Set compiler
      run: |
        if [[ "${{ matrix.compiler }}" == gcc* ]]; then
          export CC=${{ matrix.compiler }}
          export CXX=${{ matrix.compiler }}-g++
        else
          export CC=${{ matrix.compiler }}
          export CXX=${{ matrix.compiler }}++
        fi
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run comprehensive tests
      run: |
        cd build
        # Create various test files
        echo "hello world" > test1.txt
        echo "HELLO WORLD" > test2.txt
        echo "goodbye" > test3.txt
        echo "line with numbers 123" > test4.txt
        echo "line with special chars @#$%" > test5.txt
        
        # Test basic functionality
        ./cpp_ripgrep "hello" test1.txt
        ./cpp_ripgrep -i "hello" test2.txt
        ./cpp_ripgrep -c "hello" test*.txt
        ./cpp_ripgrep -v "hello" test*.txt
        ./cpp_ripgrep -n "hello" test*.txt
        ./cpp_ripgrep -w "hello" test*.txt
        
        # Test regex functionality
        ./cpp_ripgrep "\\d+" test4.txt
        ./cpp_ripgrep "\\w+" test5.txt
        
        # Test with multiple files
        ./cpp_ripgrep "line" test*.txt
        
        # Test version and help
        ./cpp_ripgrep --version
        ./cpp_ripgrep --help

  # Performance benchmark
  benchmark:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libpcre2-dev libre2-dev pkg-config time
    
    - name: Build optimized version
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)
    
    - name: Create benchmark data
      run: |
        cd build
        # Create a large test file with various patterns
        for i in {1..10000}; do
          echo "line $i: hello world test pattern matching performance benchmark" >> benchmark.txt
          echo "line $i: HELLO WORLD TEST PATTERN MATCHING PERFORMANCE BENCHMARK" >> benchmark.txt
          echo "line $i: goodbye world test pattern matching performance benchmark" >> benchmark.txt
        done
        
        # Create a file with many numbers
        for i in {1..5000}; do
          echo "number $i: 1234567890" >> numbers.txt
        done
    
    - name: Run performance benchmarks
      run: |
        cd build
        echo "=== Performance Benchmark Results ==="
        echo "Testing literal pattern matching..."
        time ./cpp_ripgrep "hello" benchmark.txt > /dev/null
        
        echo "Testing case-insensitive pattern matching..."
        time ./cpp_ripgrep -i "hello" benchmark.txt > /dev/null
        
        echo "Testing regex pattern matching..."
        time ./cpp_ripgrep "\\w+" benchmark.txt > /dev/null
        
        echo "Testing number pattern matching..."
        time ./cpp_ripgrep "\\d+" numbers.txt > /dev/null
        
        echo "Testing count mode..."
        time ./cpp_ripgrep -c "hello" benchmark.txt
        
        echo "Testing with multiple files..."
        time ./cpp_ripgrep "hello" benchmark.txt numbers.txt > /dev/null

  # Cross-compilation test
  windows-cross:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config
        sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 wine64 wine32
    
    - name: Build Windows x64
      run: |
        mkdir build-windows64
        cd build-windows64
        cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/windows-toolchain.cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        make -j$(nproc)
    
    - name: Build Windows x86
      run: |
        mkdir build-windows32
        cd build-windows32
        cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/windows32-toolchain.cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        make -j$(nproc)
    
    - name: Test Windows executables
      run: |
        # Test x64 version
        cd build-windows64
        echo "hello world" > test.txt
        wine ./cpp_ripgrep.exe "hello" test.txt
        wine ./cpp_ripgrep.exe --version
        
        # Test x86 version
        cd ../build-windows32
        echo "hello world" > test.txt
        wine ./cpp_ripgrep.exe "hello" test.txt
        wine ./cpp_ripgrep.exe --version

  # Code quality and security checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libpcre2-dev libre2-dev pkg-config
        sudo apt-get install -y clang-tidy cppcheck valgrind
    
    - name: Configure CMake with clang-tidy
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_CLANG_TIDY=clang-tidy
    
    - name: Build with clang-tidy
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem src/ include/
    
    - name: Run valgrind memory check
      run: |
        cd build
        echo "hello world" > test.txt
        valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=valgrind-out.txt ./cpp_ripgrep "hello" test.txt
        cat valgrind-out.txt 